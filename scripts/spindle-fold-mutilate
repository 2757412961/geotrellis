#!/usr/bin/python

import os
from os.path import join, basename, dirname, splitext
from subprocess import call, Popen, PIPE, STDOUT
import shutil
import sys

# memory limits
mps = 512
ms  = 512
mx  = 4096

# trellis path
trellis = os.environ['TRELLIS_HOME'] or "/home/eosheim/trellis"

# path to read from
incoming = "/var/trellis/incoming"

# path to output rasters to
out = '/var/trellis/data'

# return paths relative to trellis dir
def getd(d): return join(trellis, d)

# extents of interest
extents = {
    'contig': ["-13886230.0", "2817652.800",  "-7450230.0",  "6341652.800"],
    'hawaii': ["-17874230.3902", "2143652.7987", "-17230230.3902", "2541652.7987"],
    'alaska': ["-19840230.3902", "6723652.7987", "-14470230.3902", "11527652.7987"],
}

# scala scripts
chopper   = getd('scripts/argchop.scala')
converter = getd('scripts/geotiff-to-arg32.scala')

# used to find files in trellis dir
def find(d, name):
    path = getd(d)
    if os.path.exists(path):
        p = Popen(["find", path, "-name", name], stdout=PIPE)
        return [line[:-1] for line in p.stdout]
    else:
        return []

# used to run scala scripts
def runscala(args):
    classpath = []
    for d in ["lib_managed", "project", 'lib']:
        classpath.extend(find(d, '*.jar'))
    for d in ['src/main/scala', 'src/main/java', 'target/scala_2.8.0/classes']:
        classpath.append(getd(d))
    
    cp  = ':'.join(classpath)
    
    env = dict(os.environ)
    env['JAVA_OPTS'] = "-XX:MaxPermSize=%dm -Xms%dm -Xmx%dm" % (mps, ms, mx)

    args2 = ['scala', '-cp', cp, '-Xscript', 'Script'] + args
    print basename(args2[5]) + ' ' + ' '.join(args2[6:])
    result = call(args2, env=env)
    if result != 0:
        print '%s: exited %d' % (args2[5], result)
        sys.exit(result)

# used to run other commands
def run(args, env=None):
    print ' '.join(args)
    result = call(args, env=env)
    if result != 0:
        print '%s: exited %d' % (args[0], result)
        sys.exit(result)

# get a relative name
def relname(path, base):
    assert path.startswith(base + '/')
    return dirname(path)[len(base) + 1:]

# xyz
def trymakedirs(path):
    if not os.path.exists(path):
        os.makedirs(path)

# make sure archive directory exists
if not os.path.exists(incoming): os.mkdir(incoming)

# make sure output directory exists
if not os.path.exists(out): os.mkdir(out)

# for each geotif file given, we should process it
for s in sys.argv[1:]:
    path = os.path.realpath(s)
    print 'processing %r' % path

    # get a relative name
    d = relname(path, incoming)

    # get a temporary path
    path2 = join(out, 'tmp.tif')
    print 'temp path is %r' % path2

    # translate the tif to the temp path 
    run(['gdal_translate', '-ot', 'Int32', '-of', 'GTiff', path, path2])

    # create the basename to use for the arg32 files
    base = splitext(basename(path))[0]
    outbase = join(out, 'full', d, base)
    trymakedirs(dirname(outbase))

    print 'out base is %r' % outbase

    # conver the geotiff to an arg
    runscala([converter, path2, outbase])

    # chop the arg up first
    for suffix, extent in extents.items():
        outbase2 = join(out, suffix, d, base)
        trymakedirs(dirname(outbase2))
        print 'outbase2 is %r' % outbase2
        runscala([chopper, outbase + ".arg32", outbase2 + '.arg32'] + extent)

    # remove the intermediate arg32
    #os.unlink(outbase + '.arg32')
    #os.unlink(outbase + '.xml')

    # remove the temporary path
    os.unlink(path2)
